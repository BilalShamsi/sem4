/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReputationSystem {
  export type ColleagueStruct = { name: string; wallet: AddressLike };

  export type ColleagueStructOutput = [name: string, wallet: string] & {
    name: string;
    wallet: string;
  };

  export type RatingStruct = {
    rater: AddressLike;
    score: BigNumberish;
    comment: string;
    timestamp: BigNumberish;
  };

  export type RatingStructOutput = [
    rater: string,
    score: bigint,
    comment: string,
    timestamp: bigint
  ] & { rater: string; score: bigint; comment: string; timestamp: bigint };
}

export interface ReputationSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addColleague"
      | "colleagueAddresses"
      | "colleagueNames"
      | "getAllColleagues"
      | "getAllRatings"
      | "getAverageScore"
      | "getColleagueName"
      | "hasRated"
      | "rateUser"
      | "receivedRatings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ColleagueAdded" | "UserRated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addColleague",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "colleagueAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "colleagueNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllColleagues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRatings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getColleagueName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRated",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateUser",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedRatings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addColleague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "colleagueAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "colleagueNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllColleagues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRatings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColleagueName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedRatings",
    data: BytesLike
  ): Result;
}

export namespace ColleagueAddedEvent {
  export type InputTuple = [wallet: AddressLike, name: string];
  export type OutputTuple = [wallet: string, name: string];
  export interface OutputObject {
    wallet: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRatedEvent {
  export type InputTuple = [
    rater: AddressLike,
    ratee: AddressLike,
    score: BigNumberish,
    comment: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rater: string,
    ratee: string,
    score: bigint,
    comment: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    rater: string;
    ratee: string;
    score: bigint;
    comment: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationSystem;
  waitForDeployment(): Promise<this>;

  interface: ReputationSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addColleague: TypedContractMethod<
    [wallet: AddressLike, name: string],
    [void],
    "nonpayable"
  >;

  colleagueAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  colleagueNames: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getAllColleagues: TypedContractMethod<
    [],
    [ReputationSystem.ColleagueStructOutput[]],
    "view"
  >;

  getAllRatings: TypedContractMethod<
    [user: AddressLike],
    [ReputationSystem.RatingStructOutput[]],
    "view"
  >;

  getAverageScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getColleagueName: TypedContractMethod<
    [wallet: AddressLike],
    [string],
    "view"
  >;

  hasRated: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  rateUser: TypedContractMethod<
    [to: AddressLike, score: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;

  receivedRatings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, bigint] & {
        rater: string;
        score: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addColleague"
  ): TypedContractMethod<
    [wallet: AddressLike, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "colleagueAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "colleagueNames"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAllColleagues"
  ): TypedContractMethod<
    [],
    [ReputationSystem.ColleagueStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllRatings"
  ): TypedContractMethod<
    [user: AddressLike],
    [ReputationSystem.RatingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAverageScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getColleagueName"
  ): TypedContractMethod<[wallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasRated"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rateUser"
  ): TypedContractMethod<
    [to: AddressLike, score: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receivedRatings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, bigint] & {
        rater: string;
        score: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ColleagueAdded"
  ): TypedContractEvent<
    ColleagueAddedEvent.InputTuple,
    ColleagueAddedEvent.OutputTuple,
    ColleagueAddedEvent.OutputObject
  >;
  getEvent(
    key: "UserRated"
  ): TypedContractEvent<
    UserRatedEvent.InputTuple,
    UserRatedEvent.OutputTuple,
    UserRatedEvent.OutputObject
  >;

  filters: {
    "ColleagueAdded(address,string)": TypedContractEvent<
      ColleagueAddedEvent.InputTuple,
      ColleagueAddedEvent.OutputTuple,
      ColleagueAddedEvent.OutputObject
    >;
    ColleagueAdded: TypedContractEvent<
      ColleagueAddedEvent.InputTuple,
      ColleagueAddedEvent.OutputTuple,
      ColleagueAddedEvent.OutputObject
    >;

    "UserRated(address,address,uint8,string,uint256)": TypedContractEvent<
      UserRatedEvent.InputTuple,
      UserRatedEvent.OutputTuple,
      UserRatedEvent.OutputObject
    >;
    UserRated: TypedContractEvent<
      UserRatedEvent.InputTuple,
      UserRatedEvent.OutputTuple,
      UserRatedEvent.OutputObject
    >;
  };
}
